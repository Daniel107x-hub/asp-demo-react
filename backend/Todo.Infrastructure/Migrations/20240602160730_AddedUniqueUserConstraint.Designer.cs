// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Todo.Infrastructure.Data;

#nullable disable

namespace Todo.Infrastructure.Migrations
{
    [DbContext(typeof(TodoContext))]
    [Migration("20240602160730_AddedUniqueUserConstraint")]
    partial class AddedUniqueUserConstraint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryTaskItem", b =>
                {
                    b.Property<int>("TaskItemtaskId")
                        .HasColumnType("integer");

                    b.Property<int>("categoriescategoryId")
                        .HasColumnType("integer");

                    b.HasKey("TaskItemtaskId", "categoriescategoryId");

                    b.HasIndex("categoriescategoryId");

                    b.ToTable("CategoryTaskItem");
                });

            modelBuilder.Entity("Todo.Core.Entities.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("categoryId"));

                    b.Property<string>("color")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("icon")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("categoryId");

                    b.HasIndex("userId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Todo.Core.Entities.Priority", b =>
                {
                    b.Property<int>("priorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("priorityId"));

                    b.Property<string>("color")
                        .HasColumnType("text");

                    b.Property<string>("icon")
                        .HasColumnType("text");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("priorityId");

                    b.HasIndex("userId");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("Todo.Core.Entities.TaskItem", b =>
                {
                    b.Property<int>("taskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("taskId"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("dueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("priorityId")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("taskId");

                    b.HasIndex("priorityId");

                    b.HasIndex("userId");

                    b.ToTable("TaskItem");
                });

            modelBuilder.Entity("Todo.Core.Entities.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userId"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userId");

                    b.HasIndex("userName", "email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("CategoryTaskItem", b =>
                {
                    b.HasOne("Todo.Core.Entities.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("TaskItemtaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Todo.Core.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("categoriescategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Todo.Core.Entities.Category", b =>
                {
                    b.HasOne("Todo.Core.Entities.User", null)
                        .WithMany("categories")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Todo.Core.Entities.Priority", b =>
                {
                    b.HasOne("Todo.Core.Entities.User", null)
                        .WithMany("priorities")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Todo.Core.Entities.TaskItem", b =>
                {
                    b.HasOne("Todo.Core.Entities.Priority", "priority")
                        .WithMany("tasks")
                        .HasForeignKey("priorityId");

                    b.HasOne("Todo.Core.Entities.User", "user")
                        .WithMany("tasks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("priority");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Todo.Core.Entities.Priority", b =>
                {
                    b.Navigation("tasks");
                });

            modelBuilder.Entity("Todo.Core.Entities.User", b =>
                {
                    b.Navigation("categories");

                    b.Navigation("priorities");

                    b.Navigation("tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
